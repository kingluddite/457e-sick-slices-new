{"version":3,"sources":["webpack:///./src/components/Pagination.js","webpack:///./src/pages/slicemasters.js"],"names":["Pagination","pageSize","totalCount","currentPage","skip","base","totalPages","Math","ceil","prevPage","nextPage","hasNextPage","hasPrevPage","console","clear","log","PaginationStyles","styled","div","disabled","to","Array","from","length","map","_","i","className","key","SlicemasterGridStyles","SliceMasterStyles","SlicemastersPage","data","pageContext","slicemasters","nodes","SEO","title","parseInt","process","person","id","slug","current","name","fluid","image","asset","alt","description"],"mappings":"gNAKe,SAASA,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,WAAYC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACtEC,EAAaC,KAAKC,KAAKN,EAAaD,GACpCQ,EAAWN,EAAc,EACzBO,EAAWP,EAAc,EAGzBQ,EAAcD,GAAYJ,EAC1BM,EAAcH,GAAY,EAChCI,QAAQC,QACRD,QAAQE,IAAIX,GAGZ,IAAMY,EAAmBC,IAAOC,IAAV,mFAAGD,CAAH,iVA4BtB,OACE,kBAACD,EAAD,KACE,kBAAC,IAAD,CAAMG,UAAWP,EAAaQ,GAAOf,EAAL,IAAaI,GAA7C,UAGCY,MAAMC,KAAK,CAAEC,OAAQjB,IAAckB,KAAI,SAACC,EAAGC,GAAJ,OACtC,kBAAC,IAAD,CAAMC,UAA2B,IAAhBxB,GAA2B,IAANuB,EAAU,UAAY,GAAIE,IAAKF,EAAGN,GAAOf,EAAL,KAAaqB,EAAI,EAAIA,EAAI,EAAI,KACpGA,EAAI,MAGT,kBAAC,IAAD,CAAMP,UAAWR,EAAaS,GAAOf,EAAL,IAAaK,GAA7C,SACe,M,gBChDfmB,EAAwBZ,IAAOC,IAAV,0FAAGD,CAAH,2FAMrBa,EAAoBb,IAAOC,IAAV,sFAAGD,CAAH,qUA8BR,SAASc,EAAT,GAAkD,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACzCC,EAAeF,EAAKE,aAAaC,MAEvC,OACE,oCACE,kBAACC,EAAA,EAAD,CAAKC,MAAK,wBAAyBJ,EAAY9B,aAAe,KAC9D,kBAACH,EAAD,CACEC,SAAUqC,SAASC,KACnBrC,WAAY8B,EAAKE,aAAahC,WAC9BC,YAAa8B,EAAY9B,aAAe,EACxCC,KAAM6B,EAAY7B,KAClBC,KAAK,kBAEP,kBAACwB,EAAD,KACGK,EAAaV,KAAI,SAACgB,GAAD,OAChB,kBAACV,EAAD,CAAmBF,IAAKY,EAAOC,IAC7B,kBAAC,IAAD,CAAMrB,GAAE,gBAAkBoB,EAAOE,KAAKC,SACpC,4BACE,0BAAMhB,UAAU,QAAQa,EAAOI,QAGnC,kBAAC,IAAD,CAAKC,MAAOL,EAAOM,MAAMC,MAAMF,MAAOG,IAAKR,EAAOI,OAClD,uBAAGjB,UAAU,eAAea,EAAOS","file":"component---src-pages-slicemasters-js-76d88fa59c822f080594.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\nexport default function Pagination({ pageSize, totalCount, currentPage, skip, base }) {\n  const totalPages = Math.ceil(totalCount / pageSize);\n  const prevPage = currentPage - 1;\n  const nextPage = currentPage + 1;\n  // console.log({ currentPage, nextPage, prevPage });\n  // did we reach last page?\n  const hasNextPage = nextPage <= totalPages;\n  const hasPrevPage = prevPage >= 1;\n  console.clear();\n  console.log(skip);\n  // console.log({ hasPrevPage, hasNextPage });\n\n  const PaginationStyles = styled.div`\n    display: flex;\n    align-content: center;\n    align-items: center;\n    justify-items: center;\n    margin: 2rem 0;\n    border: 1px solid var(--grey);\n    border-radius: 5px;\n    text-align: center;\n\n    & > * {\n      flex: 1;\n      padding: 1rem;\n      border-right: 1px solid var(--grey);\n      text-decoration: none;\n\n      &[aria-current],\n      &.current {\n        color: var(--red);\n      }\n\n      &[disabled] {\n        color: var(--grey);\n        pointer-events: none;\n      }\n    }\n  `;\n\n  return (\n    <PaginationStyles>\n      <Link disabled={!hasPrevPage} to={`${base}/${prevPage}`}>\n        &#8592; Prev\n      </Link>\n      {Array.from({ length: totalPages }).map((_, i) => (\n        <Link className={currentPage === 1 && i === 0 ? 'current' : ''} key={i} to={`${base}/${i > 0 ? i + 1 : ''}`}>\n          {i + 1}\n        </Link>\n      ))}\n      <Link disabled={!hasNextPage} to={`${base}/${nextPage}`}>\n        Next &#8594;{' '}\n      </Link>\n    </PaginationStyles>\n  );\n}\n\nPagination.propTypes = {\n  pageSize: PropTypes.number,\n  totalCount: PropTypes.number,\n  currentPage: PropTypes.number,\n  skip: PropTypes.number,\n  base: PropTypes.string,\n};\n","import { graphql, Link } from 'gatsby';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Img from 'gatsby-image';\nimport styled from 'styled-components';\nimport Pagination from '../components/Pagination';\nimport SEO from '../components/SEO';\n\nconst SlicemasterGridStyles = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 2rem;\n`;\n\nconst SliceMasterStyles = styled.div`\n  a {\n    text-decoration: none;\n  }\n\n  .gatsby-image-wrapper {\n    height: 400px;\n  }\n\n  h2 {\n    position: relative;\n    z-index: 2;\n    margin-bottom: -2rem;\n    font-size: 4rem;\n    text-align: center;\n    transform: rotate(-2deg);\n  }\n\n  .description {\n    position: relative;\n    z-index: 2;\n    margin: 2rem;\n    margin-top: -6rem;\n    padding: 1rem;\n    background: var(--yellow);\n    text-align: center;\n    transform: rotate(1deg);\n  }\n`;\n\nexport default function SlicemastersPage({ data, pageContext }) {\n  const slicemasters = data.slicemasters.nodes;\n\n  return (\n    <>\n      <SEO title={`Slicemasters - Page ${pageContext.currentPage || 1}`} />\n      <Pagination\n        pageSize={parseInt(process.env.GATSBY_PAGE_SIZE)}\n        totalCount={data.slicemasters.totalCount}\n        currentPage={pageContext.currentPage || 1}\n        skip={pageContext.skip}\n        base=\"/slicemasters\"\n      />\n      <SlicemasterGridStyles>\n        {slicemasters.map((person) => (\n          <SliceMasterStyles key={person.id}>\n            <Link to={`/slicemaster/${person.slug.current}`}>\n              <h2>\n                <span className=\"mark\">{person.name}</span>\n              </h2>\n            </Link>\n            <Img fluid={person.image.asset.fluid} alt={person.name} />\n            <p className=\"description\">{person.description}</p>\n          </SliceMasterStyles>\n        ))}\n      </SlicemasterGridStyles>\n    </>\n  );\n}\n\nSlicemastersPage.propTypes = {\n  data: PropTypes.object,\n  pageContext: PropTypes.object,\n};\n\nexport const query = graphql`\n  query ($skip: Int = 0, $pageSize: Int = 2) {\n    slicemasters: allSanityPerson(limit: $pageSize, skip: $skip) {\n      totalCount\n      nodes {\n        name\n        id\n        slug {\n          current\n        }\n        description\n        image {\n          asset {\n            fluid(maxWidth: 410) {\n              ...GatsbySanityImageFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}